=slide Data types

<p><img src="../../svtypes.gif">

<hr><xmp>
int  SvTYPE(SV* sv);
void SvUPGRADE(SV* sv, int type);
</xmp>

=slide SvNULL

<p><img src="../../svnull.gif">

<p><img src="../../flags.gif">

<hr><xmp>
SV* NEWSV(int tag, STRLEN len);
SV* newSVsv(SV*);

int SvOK(SV*);
int SvOK_off(SV*);
int SvIOK(SV*);
int SvNOK(SV*);
int SvPOK(SV*);
int SvROK(SV*);

int SvMAGICAL(SV*);
int SvGMAGICAL(SV*);
int SvSMAGICAL(SV*);
int SvRMAGICAL(SV*);
</xmp>

=slide SvPV

<p><img src="../../svpv.gif">

<hr><xmp>
SV*   newSVpv(char*, int);
SV*   newSVpvn(char*, int);
SV*   newSVpvf(const char*, ...);

char* SvPV(SV*, STRLEN len); /* macro */
char* SvPV_force(SV*, STRLEN len);
char* SvPVX(SV*);

int SvCUR(SV*);
SvCUR_set(SV*, I32 val);
char* SvEND(SV*);
char* SvGROW(SV*, STRLEN newlen);

void  sv_catpv(SV*, char*);
void  sv_catpvn(SV*, char*, int);
void  sv_catpvf(SV*, const char*, ...);
void  sv_catpvfn(SV*, const char*, STRLEN,
                 va_list *, SV **, I32, bool);
void  sv_catsv(SV*, SV*);
</xmp>

=slide SvPVIV and SvPVNV

<p><img src="../../svpviv.gif">

<p><img src="../../svpvnv.gif">

<hr><xmp>
void  sv_setiv(SV*, IV);
void  sv_setuv(SV*, UV);
void  sv_setnv(SV*, double);
void  sv_setpv(SV*, char*);
void  sv_setpvn(SV*, char*, int)
void  sv_setpvf(SV*, const char*, ...);
void  sv_setpvfn(SV*, const char*, STRLEN,
                 va_list *, SV **, I32, bool);
void  sv_setsv(SV*, SV*);

SvIV(SV*)
SvNV(SV*)
SvTRUE(SV*)
</xmp>

=slide OOK

<p><img src="../../ook.gif">

<hr><xmp>
void sv_insert(SV* bigstr, STRLEN offset, STRLEN len,
              char *little, STRLEN littlelen);
void sv_chop(SV*, char* ptr);
void SvOOK_off(SV*);
</xmp>

=slide SvIV and SvNV

<p><img src="../../sviv.gif">

<p><img src="../../svnv.gif">

<hr><xmp>
SV*  newSViv(IV);
SV*  newSVnv(double);
</xmp>

=slide SvRV

<p><img src="../../svrv.gif">

<p><img src="../../svpvrv.gif">

<hr><xmp>
SV* newRV_inc((SV*) thing);
SV* newRV_noinc((SV*) thing);

SV* SvRV(SV*)

int SvREFCNT(SV* sv);
SV* SvREFCNT_inc(SV* sv);
void SvREFCNT_dec(SV* sv);
</xmp>

=slide SvPVMG

<p><img src="../../svpvmg.gif">

<hr><xmp>
void   sv_magic(SV* sv, SV* obj, int how,
                char* name, I32 namlen);
void   sv_unmagic(SV* sv, int type);
MAGIC* mg_find(SV* sv, int type);

SV*    sv_bless(SV* sv, HV* stash);
</xmp>

=slide SvPVBM

<p><img src="../../svpvbm.gif">

<hr><xmp>
void  fbm_compile(SV* sv, U32 flags);
char* fbm_instr(char* str, char* strend,
                SV* sv, U32 flags);
</xmp>

=slide SvPVLV

<p><img src="../../svpvlv.gif">

=slide AV

<p><img src="../../av.gif">

<hr><xmp>
AV*  newAV();
AV*  av_make(I32 num, SV **ptr);

void  av_push(AV*, SV*);
SV*   av_pop(AV*);
SV*   av_shift(AV*);
void  av_unshift(AV*, I32 num);
I32   av_len(AV*);
SV**  av_fetch(AV*, I32 key, I32 lval);
SV**  av_store(AV*, I32 key, SV* val);
void  av_clear(AV*);
void  av_undef(AV*);
void  av_extend(AV*, I32 key);
</xmp>

=slide HV

<p><img src="../../hv.gif">

<hr>
<p><img src="../../strtab.gif">

<hr><xmp>
HV*  newHV();

SV**  hv_store(HV*, char* key, U32 klen, SV* val, U32 hash);
SV**  hv_fetch(HV*, char* key, U32 klen, I32 lval);

bool  hv_exists(HV*, char* key, U32 klen);
SV*   hv_delete(HV*, char* key, U32 klen, I32 flags);

void  hv_clear(HV*);
void  hv_undef(HV*);

I32   hv_iterinit(HV*);
HE*   hv_iternext(HV*);
char* hv_iterkey(HE* entry, I32* retlen);
SV*   hv_iterval(HV*, HE* entry);
</xmp>

=slide GV

<p><img src="../../gv.gif">

=slide Stashes

<p><img src="../../stash.gif">

<hr><xmp>
SV* perl_get_sv(char* name, int create);
AV* perl_get_av(char* name, int create);
HV* perl_get_hv(char* name, int create);
CV* perl_get_cv(char* name, int create);

GV* gv_fetchpv(char* name, int create, int type);
</xmp>


=slide CV

<p><img src="../../cv.gif">

=slide OpTypes

<p><img src="../../optypes.gif">

=slide OpTypes

<p><img src="../../op1.gif">
<p><img src="../../op2.gif">

=slide SvPVFM

<p><img src="../../svpvfm.gif">

=slide IO

<p><img src="../../io.gif">

=slide Stacks

<p><img src="../../scope.gif">
<p><img src="../../stack.gif">
